--- chrome-remote-desktop	2022-06-12 22:03:24.370514079 +0200
+++ chrome-remote-desktop.patched	2022-06-12 22:09:40.149602655 +0200
@@ -109,6 +109,8 @@
 
 X_LOCK_FILE_TEMPLATE = "/tmp/.X%d-lock"
 FIRST_X_DISPLAY_NUMBER = 20
+EXISTING_X_DISPLAY_FILE_PATH = os.path.join(CONFIG_DIR, "Xsession")
+X_SESSION_FILE_TEMPLATE = "/tmp/.X11-unix/X%d"
 
 # Amount of time to wait between relaunching processes.
 SHORT_BACKOFF_TIME = 5
@@ -489,6 +491,16 @@
     self.ssh_auth_sockname = ("/tmp/chromoting.%s.ssh_auth_sock" %
                               os.environ["USER"])
 
+  def _use_existing_session(self):
+    with open(EXISTING_X_DISPLAY_FILE_PATH) as fh:
+      display = int(fh.readline().rstrip())
+    if not os.path.exists(X_SESSION_FILE_TEMPLATE % display):
+      logging.error("Xorg session file doesn't exist")
+      sys.exit(1)
+    logging.info("Using existing Xorg session: %d" % display)
+    self.child_env["DISPLAY"] = ":%d" % display
+    self.child_env["CHROME_REMOTE_DESKTOP_SESSION"] = "1"
+
   def _launch_pre_session(self):
     # Launch the pre-session script, if it exists. Returns true if the script
     # was launched, false if it didn't exist.
@@ -522,14 +534,18 @@
     self._init_child_env()
     self.setup_audio()
     self._setup_gnubby()
-    self._launch_server(server_args)
-    if not self._launch_pre_session():
-      # If there was no pre-session script, launch the session immediately.
-      self.launch_desktop_session()
+    if os.path.exists(EXISTING_X_DISPLAY_FILE_PATH):
+        self._use_existing_session()
+    else:
+        self._launch_server(server_args)
+        if not self._launch_pre_session():
+          # If there was no pre-session script, launch the session immediately.
+          self.launch_desktop_session()
+        self.session_inhibitor.record_started(MINIMUM_PROCESS_LIFETIME,
+                                         backoff_time)
+
     self.server_inhibitor.record_started(MINIMUM_PROCESS_LIFETIME,
                                       backoff_time)
-    self.session_inhibitor.record_started(MINIMUM_PROCESS_LIFETIME,
-                                     backoff_time)
 
   def _wait_for_setup_before_host_launch(self):
     """
